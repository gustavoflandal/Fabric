// Script de teste r√°pido para verificar os relat√≥rios

async function testReports() {
  try {
    console.log('üß™ Testando endpoint de relat√≥rios...\n');
    
    // Primeiro, fazer login
    console.log('1. Fazendo login...');
    const loginResponse = await fetch('http://localhost:3001/api/v1/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@fabric.com',
        password: 'admin123'
      })
    });
    
    const loginData = await loginResponse.json();
    const token = loginData.data.accessToken;
    console.log('‚úÖ Login bem-sucedido!\n');
    
    // Testar relat√≥rio de produ√ß√£o
    console.log('2. Testando relat√≥rio de produ√ß√£o...');
    const productionResponse = await fetch(
      'http://localhost:3001/api/v1/reports/production?startDate=2025-01-01&endDate=2025-10-20',
      {
        headers: { Authorization: `Bearer ${token}` }
      }
    );
    
    const productionData = await productionResponse.json();
    console.log('‚úÖ Relat√≥rio de produ√ß√£o:');
    console.log('   - Total de ordens:', productionData.data.summary.total);
    console.log('   - Conclu√≠das:', productionData.data.summary.completed);
    console.log('   - Produtos:', productionData.data.byProduct.length);
    console.log('');
    
    // Testar relat√≥rio de efici√™ncia
    console.log('3. Testando relat√≥rio de efici√™ncia...');
    const efficiencyResponse = await fetch(
      'http://localhost:3001/api/v1/reports/efficiency?startDate=2025-01-01&endDate=2025-10-20',
      {
        headers: { Authorization: `Bearer ${token}` }
      }
    );
    
    const efficiencyData = await efficiencyResponse.json();
    console.log('‚úÖ Relat√≥rio de efici√™ncia:');
    console.log('   - Total de ordens:', efficiencyData.data.summary.totalOrders);
    console.log('   - Efici√™ncia m√©dia:', efficiencyData.data.summary.avgQuantityEfficiency.toFixed(2) + '%');
    console.log('');
    
    // Testar relat√≥rio de qualidade
    console.log('4. Testando relat√≥rio de qualidade...');
    const qualityResponse = await fetch(
      'http://localhost:3001/api/v1/reports/quality?startDate=2025-01-01&endDate=2025-10-20',
      {
        headers: { Authorization: `Bearer ${token}` }
      }
    );
    
    const qualityData = await qualityResponse.json();
    console.log('‚úÖ Relat√≥rio de qualidade:');
    console.log('   - Total produzido:', qualityData.data.summary.totalProduced);
    console.log('   - Total refugo:', qualityData.data.summary.totalScrap);
    console.log('   - Taxa de qualidade:', qualityData.data.summary.avgQualityRate.toFixed(2) + '%');
    console.log('');
    
    // Testar relat√≥rio consolidado
    console.log('5. Testando relat√≥rio consolidado...');
    const consolidatedResponse = await fetch(
      'http://localhost:3001/api/v1/reports/consolidated?startDate=2025-01-01&endDate=2025-10-20',
      {
        headers: { Authorization: `Bearer ${token}` }
      }
    );
    
    const consolidatedData = await consolidatedResponse.json();
    console.log('‚úÖ Relat√≥rio consolidado:');
    console.log('   - Ordens totais:', consolidatedData.data.production.total);
    console.log('   - Efici√™ncia:', consolidatedData.data.production.efficiency.toFixed(2) + '%');
    console.log('');
    
    console.log('üéâ Todos os relat√≥rios est√£o funcionando corretamente!');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error(error);
  }
}

testReports();
