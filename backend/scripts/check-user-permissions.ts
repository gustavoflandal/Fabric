import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkUserPermissions() {
  console.log('üîç Verificando permiss√µes do usu√°rio admin...\n');

  // Buscar usu√°rio admin
  const user = await prisma.user.findFirst({
    where: { email: 'admin@fabric.com' },
    include: {
      roles: {
        include: {
          role: {
            include: {
              permissions: {
                include: {
                  permission: true
                }
              }
            }
          }
        }
      }
    }
  });

  if (!user) {
    console.error('‚ùå Usu√°rio admin n√£o encontrado!');
    return;
  }

  console.log(`üë§ Usu√°rio: ${user.name} (${user.email})`);
  console.log(`üìã Roles: ${user.roles.length}\n`);

  // Extrair todas as permiss√µes
  const allPermissions: string[] = [];
  for (const userRole of user.roles) {
    console.log(`\nüîê Role: ${userRole.role.name} (${userRole.role.code})`);
    console.log(`   Permiss√µes: ${userRole.role.permissions.length}`);
    
    for (const rolePerm of userRole.role.permissions) {
      const permKey = `${rolePerm.permission.resource}.${rolePerm.permission.action}`;
      if (!allPermissions.includes(permKey)) {
        allPermissions.push(permKey);
      }
    }
  }

  console.log(`\nüìä Total de permiss√µes √∫nicas: ${allPermissions.length}`);
  
  // Filtrar permiss√µes de m√≥dulos
  const modulePermissions = allPermissions.filter(p => p.startsWith('modules.'));
  console.log(`\nüìã Permiss√µes de m√≥dulos (${modulePermissions.length}):`);
  modulePermissions.forEach(p => console.log(`   ‚úì ${p}`));

  await prisma.$disconnect();
}

checkUserPermissions()
  .then(() => {
    console.log('\n‚ú® Verifica√ß√£o conclu√≠da!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  });
